name: Auto Release

on:
  push:
    branches: [main]

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: extract
        run: |
          MESSAGE=$(git log -1 --pretty=%B)
          echo "::group::Commit Message Debug"
          echo "$MESSAGE"
          echo "::endgroup::"
          
          if [[ "$MESSAGE" =~ [vV][0-9]+(\.[0-9]+)* ]]; then
            VERSION=$(echo "$MESSAGE" | grep -oi 'v[0-9]\+\(\.[0-9]\+\)*' | head -1)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "✅ Versão detectada: $VERSION"
          else
            echo "::error::NENHUMA VERSÃO DETECTADA! Padrão necessário: vX (ex: v5, v2.6, v3.0.1)"
            echo "Padrões testados:"
            grep -oE '[vV][0-9]+' <<< "$MESSAGE" || echo "Nenhum padrão encontrado"
          fi

      - name: Set Release Date
        if: ${{ steps.extract.outputs.version != '' }}
        run: |
          echo "DATE=$(date '+%d/%m/%Y')" >> $GITHUB_ENV
      
      - name: Get current commit hash
        if: ${{ steps.extract.outputs.version != '' }}
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Generate dynamic content
        if: ${{ steps.extract.outputs.version != '' }}
        run: |
          # Verifica se é a primeira tag
          if git tag --list | grep -q . ; then
            # Existem tags anteriores
            LAST_TAG=$(git describe --tags --abbrev=0 ${{ steps.extract.outputs.version }}^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          else
            # Primeira tag do repositório
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Comparando commits de: $LAST_TAG..HEAD"
          echo "PREVIOUS_VERSION=$LAST_TAG" >> $GITHUB_ENV
          
          # Obtém features desde o último ponto de referência
          FEATURES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | grep 'feat:' || echo "- Sem novos recursos")
          
          # Obtém fixes desde o último ponto de referência
          FIXES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | grep 'fix:' || echo "- Nenhuma correção nesta versão")
          
          echo "FEATURES<<EOF" >> $GITHUB_ENV
          echo "$FEATURES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "FIXES<<EOF" >> $GITHUB_ENV
          echo "$FIXES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Prepare release body
        if: ${{ steps.extract.outputs.version != '' }}
        run: |
          # Lê o template preservando quebras de linha
          TEMPLATE_CONTENT=$(cat .github/release-template.md | sed ':a;N;$!ba;s/\n/␞/g')
          
          # Substitui variáveis
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$VERSION/${{ steps.extract.outputs.version }}}"
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$DATE/${{ env.DATE }}}"
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$COMMIT_HASH/${{ env.COMMIT_HASH }}}"
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$FEATURES/${{ env.FEATURES }}}"
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$FIXES/${{ env.FIXES }}}"
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//\$PREVIOUS_VERSION/${{ env.PREVIOUS_VERSION }}}"
          
          # Restaura quebras de linha
          TEMPLATE_CONTENT="${TEMPLATE_CONTENT//␞/$'\n'}"
          
          # Salva em arquivo e variável de ambiente
          echo "$TEMPLATE_CONTENT" > release-body.md
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$TEMPLATE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Delete existing tag
        if: ${{ steps.extract.outputs.version != '' }}
        run: |
          git tag -d ${{ steps.extract.outputs.version }} || true
          git push origin :refs/tags/${{ steps.extract.outputs.version }} || true

      - name: Create Release
        if: ${{ steps.extract.outputs.version != '' }}
        uses: actions/create-release@v1
        continue-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract.outputs.version }}
          release_name: "Release ${{ steps.extract.outputs.version }}"
          body_path: release-body.md
          draft: false
          prerelease: false

